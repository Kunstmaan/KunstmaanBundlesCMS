{# Widgets #}
{% block color_widget %}
    {% spaceless %}
        {{ form_widget(form) }}
        <script>
            // jQuery(document).ready(function(){
            //     $('#{{ id }}').colorpicker({
            //         format: 'hex'
            //     });

            // });
        </script>
    {% endspaceless %}
{% endblock %}

{% block choice_widget_expanded %}
    {% spaceless %}
        <div {{ block('widget_container_attributes') }} class="nested_input_prop_container choice">
            {% for child in form %}
                <div class="input_prop">
                    {{ form_label(child) }}
                    <div class="input">
                        {{ form_widget(child) }}
                    </div>
                </div>
            {% endfor %}
        </div>
    {% endspaceless %}
{% endblock choice_widget_expanded %}

{% block choice_widget_collapsed %}
    {% spaceless %}
        <select {{ block('widget_attributes') }}{% if multiple %} multiple="multiple"{% endif %} class="form-control">
            {% if empty_value is not none %}
                <option value="" {% if required and value is empty %}selected="selected"{% endif %}>{{ empty_value|trans({}, translation_domain) }}</option>
            {% endif %}
            {% if preferred_choices|length > 0 %}
                {% set options = preferred_choices %}
                {{ block('choice_widget_options') }}
                {% if choices|length > 0 and separator is not none %}
                    <option disabled="disabled">{{ separator }}</option>
                {% endif %}
            {% endif %}
            {% set options = choices %}
            {{ block('choice_widget_options') }}
        </select>
    {% endspaceless %}
{% endblock choice_widget_collapsed %}

{% block form_widget_simple %}
    {% spaceless %}
        {% set type = type|default('text') %}
            <input type="{{ type }}" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}"{% endif %} class="form-control{% if attr['maxlength'] is defined %} js-max-length-input{% endif %}">
    {% endspaceless %}
{% endblock form_widget_simple %}

{% block textarea_widget %}
    {% spaceless %}
        <textarea {{ block('widget_attributes') }} class="form-control{% if attr['maxlength'] is defined %} js-max-length-input{% endif %}" rows="5">{{ value }}</textarea>
    {% endspaceless %}
{% endblock textarea_widget %}

{% block checkbox_widget %}
    {% spaceless %}
        <div class="checkbox">
            {% if required %}
                {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
            {% endif %}
            {% if label is empty %}
                {% set label = name|humanize %}
            {% endif %}
            <label for="{{ id }}"{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
                <input type="checkbox" {{ block('widget_attributes') }}{% if value is defined %} value="{{ value }}"{% endif %}{% if checked %} checked="checked"{% endif %}>
                {{ label|trans({}, translation_domain)|raw }}{% if required %}<span class="form-group__required-icon">*</span>{% endif %}
            </label>
        </div>
    {% endspaceless %}
{% endblock checkbox_widget %}

{% block radio_widget %}
    {% spaceless %}
        <div class="radio">
            {% if required and not compound %}
                {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
            {% endif %}
            {% if label is empty %}
                {% set label = name|humanize %}
            {% endif %}
            <input type="radio" {{ block('widget_attributes') }}{% if value is defined %} value="{{ value }}"{% endif %}{% if checked %} checked="checked"{% endif %}>
            <label for="{{ id }}"{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
                {{ label|trans({}, translation_domain)|raw }}{% if required and not compound %}<span class="form-group__required-icon">*</span>{% endif %}
            </label>
        </div>
    {% endspaceless %}
{% endblock radio_widget %}


{# Labels #}
{% block form_label %}
    {% spaceless %}
        {% if 'checkbox' not in block_prefixes and label is not sameas(false) %}
            {% set label_attr = label_attr|merge({'class': label_attr.class|default('')|trim}) %}
            {% if not compound %}
                {% set label_attr = label_attr|merge({'for': id}) %}
            {% endif %}
            {% if required %}
                {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
            {% endif %}
            {% if label is not sameas(false) %}
                {% if label is empty %}
                    {% set label = name|humanize %}
                {% endif %}
                <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
                    {{ label|trans({}, translation_domain) }}{% if required %} *{% endif %}
                </label>
            {% endif %}
        {% endif %}
    {% endspaceless %}
{% endblock form_label %}


{# Rows #}
{% block form_row %}
    {% spaceless %}
        <div class="form-group{% if errors|length > 0 %} has-error{% endif %}">
            {{ form_label(form) }}

            {% if attr['nested_form'] is defined and attr['nested_form'] == true %}
                {% set sortable = false %}
                {% if attr['nested_sortable'] is defined and attr['nested_sortable'] == true %}
                    {% set sortable = true %}
                    {% set sortableField = attr['nested_sortable_field']|default('weight') %}
                {% endif %}
                <ul class="nested_form ul_{{ form.vars.id }}{% if sortable %} nested_sortable{% endif %}"{% if sortable %} data-sortkey="{{ form.vars.id }}___name___{{ sortableField }}"{% endif %}{% if form.vars.allow_add %} data-prototype="{{ form_widget(form.vars.prototype)|e }}"{% endif %}>
                    {% for obj in form %}
                        <li class="nested_form_item {% if sortable %}nested_form_item--sortable{% endif %}" delkey="{{ form.vars.id|replace({'form_': 'delete_'}) }}_{{ obj.vars.value.id }}"{% if sortable %} data-sortkey="{{ obj.children[sortableField].vars.id }}"{% endif %}>
                            {% if sortable %}
                                <div class="prop_bar">
                                    <i class="icon-move"></i>
                                    <div class="actions"></div>
                                </div>
                            {% endif %}
                            {% for child in obj.children %}
                                {{ form_row(child) }}
                            {% endfor %}
                        </li>
                    {% endfor %}
                </ul>

                <script>
                    // $(document).ready(function () {
                    //     var collectionHolder = $('ul.ul_{{ form.vars.id }}');
                    //     var $addButtonLi = $('<li><a href="#" class="btn btn-mini add-btn"><i class="icon-plus-sign"></i> add new</a></li>');
                    //     {% if sortable %}
                    //         var removeButtonHtml = '<a href="#" class="del red"><i class="icon-trash"></i></a>';
                    //     {% else %}
                    //         var removeButtonHtml = '<a href="#" class="btn btn-mini del-btn"><i class="icon-trash"></i> delete</a>';
                    //     {% endif %}

                    //     var allow_add = {{ form.vars.allow_add|default('0') }};
                    //     var allow_delete = {{ form.vars.allow_delete|default('0') }};
                    //     var min = {{ attr['nested_form_min']|default('0') }};
                    //     var max = {{ attr['nested_form_max']|default('false') }};
                    //     var sortable = {{ attr['nested_sortable']|default('false') }};

                    //     new PagepartSubForm(collectionHolder, $addButtonLi, removeButtonHtml, allow_add, allow_delete, min, max, sortable).init();

                    //     if (sortable) {
                    //         collectionHolder.sortable({
                    //             handle: '.prop_bar',
                    //             cursor: 'move',
                    //             placeholder: "placeholder",
                    //             forcePlaceholderSize: true,
                    //             tolerance:"pointer",
                    //             revert: 100
                    //         }).bind('sortupdate', function() {
                    //             // Adapt weight field
                    //             var weight = 0;
                    //             $('.ul_{{ form.vars.id }} li').each(function() {
                    //                 var fieldId = $(this).data('sortkey');
                    //                 if (fieldId === undefined) {
                    //                     return;
                    //                 }
                    //                 $('#' + fieldId).val(weight++);
                    //             });
                    //         });
                    //     }
                    // });
                </script>
            {% else %}
                {% if attr['info_text'] is defined %}
                    <div class="input-group">
                        {{ form_widget(form) }}
                        <span class="input-group-addon">
                            <strong class="input-group-addon--tooltip" data-toggle="tooltip" data-container="body" data-placement="top" title="{{ attr['info_text'] }}" id="{{ id }}_info_text">?</strong>
                        </span>
                    </div>
                {% else %}
                    {{ form_widget(form) }}
                {% endif %}
            {% endif %}

            {% if max_length %}
                <script>
                    // jQuery(document).ready(function(){
                    //     $("#{{ id }}").charCount({
                    //         allowed: {{ max_length }},
                    //         counterText: 'Characters left: ',
                    //         css: 'help-inline',
                    //         cssExceeded: 'error'
                    //     });
                    //     $("#{{ id }}").attr('maxlength', '');
                    // });
                </script>
            {% endif %}
            {% if attr['title'] is defined %}
                <script>
                    // jQuery(document).ready(function(){
                    //     $("#{{ id }}").tooltip();
                    // });
                </script>
            {% endif %}

            {{ form_errors(form) }}
        </div>
    {% endspaceless %}
{% endblock form_row %}


{# Misc #}
{% block datetime_widget %}
    {% use 'form_div_layout.html.twig' with datetime_widget as base_datetime_widget %}
    <div class="datetime small-datetime-widget">
        {{ block('base_datetime_widget') }}
    </div>
{% endblock %}

{% block date_widget %}
    {% use 'form_div_layout.html.twig' with date_widget as base_date_widget %}
    {% if widget == 'single_text' %}
        <script>
            // jQuery(document).ready(function(){
            //     $("#{{ id }}").inputmask("date");
            //     $("#{{ id }}").addClass('form_datepicker');
            //     $("#{{ id }}").datepicker({'format': 'dd/mm/yyyy'});
            // });
        </script>
    {% endif %}
    {{ block('base_date_widget') }}
{% endblock date_widget %}

{% block time_widget %}
    {% use 'form_div_layout.html.twig' with time_widget as base_time_widget %}
    {% if widget == 'single_text' %}
        <script>
            // jQuery(document).ready(function(){
            //     $("#{{ id }}").inputmask("hh:mm");
            //     $("#{{ id }}").addClass('form_timepicker');
            //     $("#{{ id }}").timepicker({
            //         'showMeridian': false,
            //         'minuteStep': 1,
            //         'defaultTime': false
            //     });
            // });
        </script>
    {% endif %}
    {# type="time" shows am/pm in chrome #}
    {% set type = 'text' %}
    {{ block('base_time_widget') }}
{% endblock time_widget %}

{% block form_errors %}
    {% spaceless %}
        {% if errors|length > 0 %}
                {% for error in errors %}
                    <span class="help-inline">{{
                    error.messagePluralization is null
                    ? error.messageTemplate|trans(error.messageParameters, 'validators')
                    : error.messageTemplate|transchoice(error.messagePluralization, error.messageParameters, 'validators')
                    }}</span>
                {% endfor %}
        {% endif %}
    {% endspaceless %}
{% endblock form_errors %}

{% block range_widget %}
    {% spaceless %}
        <div class="range">
            {{ form_widget(form, {'type' : 'range', 'attr' : attr }) }}
        </div>
    {% endspaceless %}
{% endblock %}
