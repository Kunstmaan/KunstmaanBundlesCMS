<?php
namespace Kunstmaan\MediaBundle\Tests\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Kunstmaan\MediaBundle\Entity\Folder;
use Kunstmaan\MediaBundle\Entity\Media;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-28 at 14:19:20.
 */
class FolderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Folder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * @covers Kunstmaan\MediaBundle\Entity\Folder::__construct
     */
    protected function setUp()
    {
        $this->object = new Folder();
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getName
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setName
     * @covers Kunstmaan\MediaBundle\Entity\Folder::__toString
     */
    public function testGetSetName()
    {
        $this->object->setName('name');
        $this->assertEquals('name', $this->object->getName());
        $this->assertEquals('name', $this->object->__toString());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getRel
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setRel
     */
    public function testGetSetRel()
    {
        $this->object->setRel('rel');
        $this->assertEquals('rel', $this->object->getRel());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getCreatedAt
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setCreatedAt
     */
    public function testGetSetCreatedAt()
    {
        $date = new \DateTime();
        $this->object->setCreatedAt($date);
        $this->assertEquals($date, $this->object->getCreatedAt());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getUpdatedAt
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setUpdatedAt
     */
    public function testGetSetUpdatedAt()
    {
        $date = new \DateTime();
        $this->object->setUpdatedAt($date);
        $this->assertEquals($date, $this->object->getUpdatedAt());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getParent
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setParent
     */
    public function testGetParent()
    {
        $parent = new Folder();
        $parent->setId(45);
        $this->object->setParent($parent);
        $this->assertEquals(45, $this->object->getParent()->getId());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setDeleted
     * @covers Kunstmaan\MediaBundle\Entity\Folder::isDeleted
     */
    public function testGetSetDeleted()
    {
        $this->assertFalse($this->object->isDeleted());

        $this->object->setDeleted(true);
        $this->assertTrue($this->object->isDeleted());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getTranslatableLocale
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setTranslatableLocale
     */
    public function testGetSetTranslatableLocale()
    {
        $this->object->setTranslatableLocale('nl');
        $this->assertEquals('nl', $this->object->getTranslatableLocale());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getParents
     */
    public function testGetParents()
    {
        $root = new Folder();
        $root->setId(1);

        $subFolder = new Folder();
        $subFolder->setId(2);
        $subFolder->setParent($root);

        $subSubFolder = new Folder();
        $subSubFolder->setId(3);
        $subSubFolder->setParent($subFolder);

        $parents = array($root, $subFolder);
        $this->assertEquals($parents, $subSubFolder->getParents());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::addChild
     */
    public function testAddChild()
    {
        $this->assertCount(0, $this->object->getChildren());

        $subFolder = new Folder();
        $subFolder->setId(2);
        $this->object->addChild($subFolder);

        $this->assertCount(1, $this->object->getChildren());
        $this->assertEquals($this->object, $subFolder->getParent());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::addMedia
     */
    public function testAddMedia()
    {
        $this->assertCount(0, $this->object->getMedia());

        $media = new Media();
        $this->object->addMedia($media);

        $this->assertCount(1, $this->object->getMedia());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getMedia
     */
    public function testGetMedia()
    {
        $media = new Media();
        $this->object->addMedia($media);

        $deletedMedia = new Media();
        $deletedMedia->setDeleted(true);
        $this->object->addMedia($deletedMedia);

        $this->assertCount(1, $this->object->getMedia());
        $this->assertCount(1, $this->object->getMedia(false));
        $this->assertCount(2, $this->object->getMedia(true));

        $folderMedia = $this->object->getMedia(false);
        $this->assertContains($media, $folderMedia);
        $this->assertNotContains($deletedMedia, $folderMedia);

        $folderMedia = $this->object->getMedia(true);
        $this->assertContains($media, $folderMedia);
        $this->assertContains($deletedMedia, $folderMedia);
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getChildren
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setChildren
     */
    public function testGetSetChildren()
    {
        $child = new Folder();

        $deletedChild = new Folder();
        $deletedChild->setDeleted(true);

        $children = new ArrayCollection();
        $children->add($child);
        $children->add($deletedChild);

        $this->object->setChildren($children);

        $this->assertCount(1, $this->object->getChildren());
        $this->assertCount(1, $this->object->getChildren(false));
        $this->assertCount(2, $this->object->getChildren(true));

        $children = $this->object->getChildren(false);
        $this->assertContains($child, $children);
        $this->assertNotContains($deletedChild, $children);

        $children = $this->object->getChildren(true);
        $this->assertContains($child, $children);
        $this->assertContains($deletedChild, $children);
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::hasActive
     */
    public function testHasActive()
    {
        $root = new Folder();
        $root->setId(1);

        $subFolder = new Folder();
        $subFolder->setId(2);
        $root->addChild($subFolder);

        $subFolder2 = new Folder();
        $subFolder2->setId(4);
        $root->addChild($subFolder2);

        $subSubFolder = new Folder();
        $subSubFolder->setId(3);
        $subFolder->addChild($subSubFolder);

        $this->assertTrue($root->hasActive(2));
        $this->assertTrue($root->hasActive(4));
        $this->assertTrue($subFolder->hasActive(3));
        $this->assertFalse($subFolder->hasActive(4));
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getInternalName
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setInternalName
     */
    public function testGetSetInternalName()
    {
        $this->object->setInternalName('internal_name');
        $this->assertEquals('internal_name', $this->object->getInternalName());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setLeft
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getLeft
     */
    public function testGetSetLeft()
    {
        $this->assertEquals(0, $this->object->getLeft());
        $this->object->setLeft(1);
        $this->assertEquals(1, $this->object->getLeft());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setRight
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getRight
     */
    public function testGetSetRight()
    {
        $this->assertEquals(0, $this->object->getRight());
        $this->object->setRight(2);
        $this->assertEquals(2, $this->object->getRight());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::setLevel
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getLevel
     */
    public function testGetSetLevel()
    {
        $this->assertEquals(0, $this->object->getLevel());
        $this->object->setLevel(1);
        $this->assertEquals(1, $this->object->getLevel());
    }

    /**
     * @covers Kunstmaan\MediaBundle\Entity\Folder::getOptionLabel
     */
    public function testGetOptionLabel()
    {
        $this->object
            ->setName('Test')
            ->setLevel(2);

        $this->assertEquals('-- Test', $this->object->getOptionLabel());
    }
}
