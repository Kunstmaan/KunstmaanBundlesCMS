<?php

namespace Kunstmaan\RedirectBundle\Tests\Form;

use Kunstmaan\RedirectBundle\Form\RedirectAdminType;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-16 at 17:32:30.
 */
class RedirectAdminTypeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var RedirectAdminType
     */
    protected $objectMultiDomain;

    /**
     * @var RedirectAdminType
     */
    protected $objectSingleDomain;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $multiDomainConfiguration = $this->getMockBuilder('Kunstmaan\AdminBundle\Helper\DomainConfigurationInterface')
            ->disableOriginalConstructor()->getMock();
        $multiDomainConfiguration->expects($this->any())->method('isMultiDomainHost')->will($this->returnValue(true));
        $multiDomainConfiguration->expects($this->any())->method('getHosts')->will($this->returnValue(array('domain.com', 'domain.be')));

        $singleDomainConfiguration = $this->getMockBuilder('Kunstmaan\AdminBundle\Helper\DomainConfigurationInterface')
            ->disableOriginalConstructor()->getMock();
        $singleDomainConfiguration->expects($this->any())->method('isMultiDomainHost')->will($this->returnValue(false));
        $singleDomainConfiguration->expects($this->any())->method('getHosts')->will($this->returnValue(array()));

        $this->objectMultiDomain = new RedirectAdminType($multiDomainConfiguration);
        $this->objectSingleDomain = new RedirectAdminType($singleDomainConfiguration);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kunstmaan\RedirectBundle\Form\RedirectAdminType::buildForm
     */
    public function testBuildForm()
    {
        $builder = $this->getMock('Symfony\Component\Form\Test\FormBuilderInterface');
        $builder
            ->expects($this->at(0))
            ->method('add')
            ->with('origin');
        $builder
            ->expects($this->at(1))
            ->method('add')
            ->with('target');
        $builder
            ->expects($this->at(2))
            ->method('add')
            ->with('permanent');

        $this->objectSingleDomain->buildForm($builder, array());

        $builder = $this->getMock('Symfony\Component\Form\Test\FormBuilderInterface');
        $builder
            ->expects($this->at(0))
            ->method('add')
            ->with('domain');
        $builder
            ->expects($this->at(1))
            ->method('add')
            ->with('origin');
        $builder
            ->expects($this->at(2))
            ->method('add')
            ->with('target');
        $builder
            ->expects($this->at(3))
            ->method('add')
            ->with('permanent');

        $this->objectMultiDomain->buildForm($builder, array());
    }

    /**
     * @covers Kunstmaan\RedirectBundle\Form\RedirectAdminType::getName
     */
    public function testGetName()
    {
        $this->assertEquals(RedirectAdminType::class, $this->objectMultiDomain->getName());
    }
}
