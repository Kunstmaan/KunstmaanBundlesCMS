<?php

namespace Kunstmaan\GeneratorBundle\Generator;

use Kunstmaan\GeneratorBundle\Helper\GeneratorUtils;
use Sensio\Bundle\GeneratorBundle\Generator\Generator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpKernel\Bundle\Bundle;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

/**
 * Generates tests to test the admin backend generated by the default-site generator
 */
class AdminTestsGenerator extends Generator
{
    /**
     * @var ContainerInterface
     */
    private $container;

    /**
     * @var Filesystem
     */
    private $filesystem;

    /**
     * @var string
     */
    private $fullSkeletonDir;

    /**
     * @param ContainerInterface $container   The container
     * @param Filesystem         $filesystem  The filesytem
     * @param string             $skeletonDir The skeleton directory
     */
    public function __construct(ContainerInterface $container, Filesystem $filesystem, $skeletonDir)
    {
        $this->container       = $container;
        $this->filesystem      = $filesystem;
        $this->fullSkeletonDir = GeneratorUtils::getFullSkeletonPath($skeletonDir);
    }

    /**
     * @param Bundle          $bundle
     * @param OutputInterface $output
     */
    public function generate(Bundle $bundle, OutputInterface $output)
    {
        // This is needed so the renderFile method will search for the files
        // in the correct location
        $this->setSkeletonDirs(array($this->fullSkeletonDir));

        $parameters = array(
            'namespace' => $bundle->getNamespace(),
            'bundle'    => $bundle
        );

        $this->generateBehatTests($bundle, $output, $parameters);
    }

    /**
     * @param Bundle          $bundle
     * @param OutputInterface $output
     * @param array           $parameters
     */
    public function generateBehatTests(Bundle $bundle, OutputInterface $output, array $parameters)
    {
        $dirPath     = sprintf("%s/Features", $bundle->getPath());
        $skeletonDir = sprintf("%s/Features", $this->fullSkeletonDir);

        // First copy all the content
        $this->filesystem->mirror($this->fullSkeletonDir, $bundle->getPath());

        // Now render the Context files to replace the namespace etc.
        if ($handle = opendir($skeletonDir . "/Context")) {

            while (false !== ($entry = readdir($handle))) {
                // Check to make sure we skip hidden folders
                // And we render the files ending in .php
                if (substr($entry, 0, 1) != '.' && substr($entry, -strlen(".php")) === ".php") {
                    $this->renderFile("/Features/Context/" . $entry, $dirPath . "/Context/" . $entry, $parameters);
                }
            }

            closedir($handle);
        }

        $featureContext = $dirPath . "/Context/FeatureContext.php";
        if ($this->filesystem->exists($featureContext)) {
            $contents = file_get_contents($featureContext);
            $contents = str_replace(
                '-adminpwd-',
                $this->container->getParameter('kunstmaan_admin.admin_password'),
                $contents
            );
            file_put_contents($featureContext, $contents);
        }

        $output->writeln('Generating Behat Tests : <info>OK</info>');
    }
}
