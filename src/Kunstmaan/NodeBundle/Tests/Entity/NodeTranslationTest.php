<?php

namespace Kunstmaan\NodeBundle\Tests\Entity;

use Kunstmaan\NodeBundle\Entity\Node;
use Kunstmaan\NodeBundle\Entity\NodeVersion;
use Kunstmaan\NodeBundle\Entity\NodeTranslation;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-17 at 16:40:16.
 */
class NodeTranslationTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var NodeTranslation
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new NodeTranslation();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::setNode
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getNode
     */
    public function testSetGetNode()
    {
        $node = new Node();
        $this->object->setNode($node);
        $this->assertEquals($node, $this->object->getNode());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::setLang
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getLang
     */
    public function testSetGetLang()
    {
        $this->object->setLang('nl');
        $this->assertEquals('nl', $this->object->getLang());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::setOnline
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::isOnline
     */
    public function testSetIsOnline()
    {
        $this->object->setOnline(true);
        $this->assertTrue($this->object->isOnline());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::setTitle
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getTitle
     */
    public function testSetGetTitle()
    {
        $this->object->setTitle('A node translation title');
        $this->assertEquals('A node translation title', $this->object->getTitle());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::setSlug
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getSlug
     */
    public function testSetGetSlug()
    {
        $this->object->setSlug('a-node-translation-slug');
        $this->assertEquals('a-node-translation-slug', $this->object->getSlug());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::__construct
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getFullSlug
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getSlugPart
     */
    public function testGetFullSlug()
    {
        $parentNode = $this->getNodeWithTranslation('nl', 'Parent node title', 'parent-node-slug');

        $childNode = new Node();
        $childNode->setParent($parentNode);
        $childNodeTrans = new NodeTranslation();
        $childNodeTrans->setLang('nl')
            ->setSlug('child-node-slug');
        $childNode->addNodeTranslation($childNodeTrans);

        $this->assertEquals('parent-node-slug/child-node-slug', $childNodeTrans->getFullSlug());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::__construct
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getFullSlug
     */
    public function testGetFullSlugWithEmptySlug()
    {
        $childNode = new Node();
        $childNodeTrans = new NodeTranslation();
        $childNodeTrans->setLang('nl')
            ->setSlug('');
        $childNode->addNodeTranslation($childNodeTrans);

        $this->assertNull($childNodeTrans->getFullSlug());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::setPublicNodeVersion
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getPublicNodeVersion
     */
    public function testSetGetPublicNodeVersion()
    {
        $nodeVersion = new NodeVersion();
        $this->object->setPublicNodeVersion($nodeVersion);
        $this->assertEquals($nodeVersion, $this->object->getPublicNodeVersion());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::setNodeVersions
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getNodeVersions
     */
    public function testSetGetNodeVersions()
    {
        $nodeVersions = new ArrayCollection();
        $nodeVersion1 = new NodeVersion();
        $nodeVersion1->setType('public');
        $nodeVersions->add($nodeVersion1);
        $nodeVersion2 = new NodeVersion();
        $nodeVersion2->setType('draft');
        $nodeVersions->add($nodeVersion2);
        $this->object->setNodeVersions($nodeVersions);
        $this->assertEquals(2, $this->object->getNodeVersions()->count());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::addNodeVersion
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getNodeVersion
     */
    public function testAddGetNodeVersion()
    {
        $nodeVersion1 = new NodeVersion();
        $nodeVersion1->setType('public');
        $this->object->addNodeVersion($nodeVersion1);
        $nodeVersion2 = new NodeVersion();
        $nodeVersion2->setType('draft');
        $this->object->addNodeVersion($nodeVersion2);
        $this->assertEquals($nodeVersion1, $this->object->getNodeVersion('public'));
        $this->assertEquals($nodeVersion2, $this->object->getNodeVersion('draft'));
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getNodeVersion
     */
    public function testGetNonExistentNodeVersion()
    {
        $this->assertNull($this->object->getNodeVersion('draft'));
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getDefaultAdminType
     */
    public function testGetDefaultAdminType()
    {
        $this->assertInstanceOf('Kunstmaan\NodeBundle\Form\NodeTranslationAdminType', $this->object->getDefaultAdminType());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::setUrl
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getUrl
     */
    public function testSetGetUrl()
    {
        $this->object->setUrl('parent/child-url');
        $this->assertEquals('parent/child-url', $this->object->getUrl());
    }

    /**
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::setWeight
     * @covers Kunstmaan\NodeBundle\Entity\NodeTranslation::getWeight
     */
    public function testSetGetWeight()
    {
        $this->object->setWeight(10);
        $this->assertEquals(10, $this->object->getWeight());
    }

    /**
     * @param string $lang   The locale
     * @param string $title  The title
     * @param string $slug   The slug
     * @param int    $nodeId The node id
     *
     * @return Node
     */
    private function getNodeWithTranslation($lang, $title, $slug, $nodeId = null)
    {
        $node = new Node();
        if (!is_null($nodeId)) {
            $node->setId($nodeId);
        }
        $nodeTranslation = new NodeTranslation();
        $nodeTranslation->setLang($lang)
            ->setTitle($title)
            ->setSlug($slug);
        $node->addNodeTranslation($nodeTranslation);

        return $node;
    }
}
